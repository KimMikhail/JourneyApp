//
//  ListViewController.swift
//  Journey
//
//  Created by  Mikhail on 01.03.2021.
//  Copyright (c) 2021  Mikhail. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol ListDisplayLogic: class {
    func displayRoutes(viewModel: ListOfRoutes.DisplayRoutes.ViewModel)
    func displayDeleteRoute(viewModel: ListOfRoutes.DeleteRow.ViewModel)
}

class ListViewController: UITableViewController, ListDisplayLogic {
    
    var routes: Results<Route>!
//    var routes: [Route] = []
    
    var interactor: ListBusinessLogic?
    var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        let cellNib = UINib(nibName: "RouteTableViewCell", bundle: nil)
        tableView.register(cellNib, forCellReuseIdentifier: "RouteTableViewCell")
        tableView.rowHeight = 130
        fillTable()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fillTable()
    }
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Do something
    
    func fillTable() {
        let request = ListOfRoutes.DisplayRoutes.Request()
        interactor?.displayRoutes(request: request)
    }
    
    func displayRoutes(viewModel: ListOfRoutes.DisplayRoutes.ViewModel) {
        
        routes = viewModel.routes
        tableView.reloadData()
    }
    func displayDeleteRoute(viewModel: ListOfRoutes.DeleteRow.ViewModel) {
        routes = viewModel.routes
        tableView.reloadData()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

// MARK: TableViewDataSource
extension ListViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return routes.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if let cell = tableView.dequeueReusableCell(withIdentifier: "RouteTableViewCell") as? RouteTableViewCell {
            let route = routes[indexPath.row]
            cell.distanceLabel.text = "\(route.distance) km"
            cell.timeLabel.text = getTimeString(timeInterval: route.timeStamps.last!.timeIntervalSince(route.timeStamps.first!))
            cell.stepsLabel.text = "\(route.steps)"
            if let imageData = route.imageData {
                let image = UIImage(data: imageData)
                cell.imageView?.image = image
            }
            
            return cell
        }
        
        return UITableViewCell()
    }
    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            print("delete")
            
            let request = ListOfRoutes.DeleteRow.Request(route: routes[indexPath.row])
            interactor?.deleteRow(request: request)
        }
    }
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    
    private func getTimeString(timeInterval: TimeInterval) -> String {
        let ti = Int(timeInterval)
        let seconds = ti % 60
        let minutes = (ti / 60) % 60
        let hours = (ti / 3600)
        
        
        return NSString(format: "%0.2d:%0.2d:%0.2d",hours,minutes,seconds) as String
    }
}
