//
//  ListInteractor.swift
//  Journey
//
//  Created by  Mikhail on 01.03.2021.
//  Copyright (c) 2021  Mikhail. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol ListBusinessLogic {
    func displayRoutes(request: ListOfRoutes.DisplayRoutes.Request)
    func deleteRow(request: ListOfRoutes.DeleteRow.Request)
    func select(row: Int)
}

protocol ListDataStore {
    
    var routesData: Results<Route>! { get set }
    var selectedRoute: Route? { get set }
    
}

class ListInteractor: ListBusinessLogic, ListDataStore {
    var selectedRoute: Route?
    
    
//    var routes: [Route] = []
    var routesData: Results<Route>!
    
    var presenter: ListPresentationLogic?
    var worker: ListWorker?
    
    init() {
        routesData = realm.objects(Route.self)
    }
    func displayRoutes(request: ListOfRoutes.DisplayRoutes.Request) {
        
        worker = ListWorker()
        worker?.doSomeWork()
        
        
        let response = ListOfRoutes.DisplayRoutes.Response(routes: routesData)
        presenter?.presentRoutes(response: response)
    }
    func deleteRow(request: ListOfRoutes.DeleteRow.Request) {
        ListWorker.deleteRoute(request.route)
        
        let response = ListOfRoutes.DeleteRow.Response(routes: routesData)
        presenter?.presentDeleteRoute(response: response)
    }
    func select(row: Int) {
        selectedRoute = routesData[row]
        presenter?.presentRouteDetails()
    }
}
