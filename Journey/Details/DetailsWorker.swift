//
//  DetailsWorker.swift
//  Journey
//
//  Created by  Mikhail on 29.03.2021.
//  Copyright (c) 2021  Mikhail. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Photos

class DetailsWorker {
    func getPhotos(fromDate: Date, toDate: Date) -> [UIImage] {
        let startDate = NSDate(timeInterval: 0, since: fromDate)
        let endDate = NSDate(timeInterval: 0, since: toDate)
            var images = [UIImage]()
            let imageManager = PHImageManager.default()

            let requestOptions = PHImageRequestOptions()
            requestOptions.isSynchronous = true
            requestOptions.isNetworkAccessAllowed = true

            // Fetch the images between the start and end date
            let fetchOptions = PHFetchOptions()
            fetchOptions.predicate = NSPredicate(format: "creationDate > %@ AND creationDate < %@", startDate, endDate)

            images = []

            let fetchResult: PHFetchResult = PHAsset.fetchAssets(with: PHAssetMediaType.image, options: fetchOptions)
            // If the fetch result isn't empty,
            // proceed with the image request
            if fetchResult.count > 0 {
                // Perform the image request
                for index in 0  ..< fetchResult.count  {
                    let asset = fetchResult.object(at: index)
                    imageManager.requestImageDataAndOrientation(for: asset, options: requestOptions) { (imageData: Data?, dataUTI: String?, orientation: CGImagePropertyOrientation, info: [AnyHashable : Any]?) -> Void in
                        if let imageData = imageData {
                            if let image = UIImage(data: imageData) {
                                // Add the returned image to your array
                                images += [image]
                            }
                        }
                        if images.count == fetchResult.count {
                            // Do something once all the images
                            // have been fetched. (This if statement
                            // executes as long as all the images
                            // are found; but you should also handle
                            // the case where they're not all found.)
                        }
                    }
                }
            }
        return images
        }
}


/*
 func fetchPhotosInRange(startDate:NSDate, endDate:NSDate) {

         let imgManager = PHImageManager.default()

         let requestOptions = PHImageRequestOptions()
         requestOptions.isSynchronous = true
         requestOptions.isNetworkAccessAllowed = true

         // Fetch the images between the start and end date
         let fetchOptions = PHFetchOptions()
         fetchOptions.predicate = NSPredicate(format: "creationDate > %@ AND creationDate < %@", startDate, endDate)

         images = []

         let fetchResult: PHFetchResult = PHAsset.fetchAssets(with: PHAssetMediaType.image, options: fetchOptions)
         // If the fetch result isn't empty,
         // proceed with the image request
         if fetchResult.count > 0 {
             // Perform the image request
             for index in 0  ..< fetchResult.count  {
                 let asset = fetchResult.object(at: index)
                 imgManager.requestImageData(for: asset, options: requestOptions, resultHandler: { (imageData: Data?, dataUTI: String?, orientation: UIImageOrientation, info: [AnyHashable : Any]?) -> Void in
                     if let imageData = imageData {
                         if let image = UIImage(data: imageData) {
                             // Add the returned image to your array
                             self.images += [image]
                         }
                     }
                     if self.images.count == fetchResult.count {
                         // Do something once all the images
                         // have been fetched. (This if statement
                         // executes as long as all the images
                         // are found; but you should also handle
                         // the case where they're not all found.)
                         print(self.images)
                     }
                 })
             }
         }
     }
*/
