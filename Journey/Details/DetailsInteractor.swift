//
//  DetailsInteractor.swift
//  Journey
//
//  Created by  Mikhail on 29.03.2021.
//  Copyright (c) 2021  Mikhail. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import MapKit

protocol DetailsBusinessLogic {
    func prepareStats(request: Details.SetStatistic.Request)
    func preparePhotos(request: Details.ShowPhotos.Request)
    func prepareMap(request: Details.SetMap.Request)
    func centerMap(request: Details.CenterMap.Request)
}

protocol DetailsDataStore {
    var route: Route? { get set }
}

class DetailsInteractor: DetailsBusinessLogic, DetailsDataStore {
    var route: Route?
    
    
    var presenter: DetailsPresentationLogic?
    var worker: DetailsWorker?
    
    func prepareStats(request: Details.SetStatistic.Request) {
        guard let route = route else { return }
        let response = Details.SetStatistic.Response(route: route)
        presenter?.presentStats(response: response)
    }
    
    func preparePhotos(request: Details.ShowPhotos.Request) {
        
        guard let route = route else { return }
        guard let from = route.timeStamps.first, let to = route.timeStamps.last else { return }
        worker = DetailsWorker()
        let photos = worker?.getPhotos(fromDate: from, toDate: to)
        let response = Details.ShowPhotos.Response(route: route, photos: photos)
        presenter?.presentData(response: response)
    }
    func prepareMap(request: Details.SetMap.Request) {
        print(#function)
        guard let route = route else { return }
        var coordinates = [CLLocationCoordinate2D]()
        for loc in route.coordinates {
            coordinates.append(CLLocationCoordinate2D(latitude: loc.lat, longitude: loc.lon))
        }
        let response = Details.SetMap.Response(coordinates: coordinates)
        presenter?.presentMap(response: response)
    }
    func centerMap(request: Details.CenterMap.Request) {
        guard let route = route else { return }
        guard let first = route.coordinates.first else { return }
        var minLat = first.lat
        var minLon = first.lon
        var maxLat = minLat
        var maxLon = minLon
        for coord in route.coordinates {
            if coord.lat < minLat {
                minLat = coord.lat
            }
            if coord.lat > maxLat {
                maxLat = coord.lat
            }
            if coord.lon < minLon {
                minLon = coord.lon
            }
            if coord.lon > maxLon {
                maxLon = coord.lon
            }
        }
        minLat -= 0.001
        minLon -= 0.001
        maxLat += 0.001
        maxLon += 0.001
        let c1 = CLLocation(latitude: minLat, longitude: minLon)
        let c2 = CLLocation(latitude: maxLat, longitude: maxLon)
        let zoom = c1.distance(from: c2)
        let location = CLLocationCoordinate2D(latitude: (maxLat + minLat)*0.5, longitude: (maxLon + minLon)*0.5)
        
        let region = MKCoordinateRegion(center: location, latitudinalMeters: zoom, longitudinalMeters: zoom)
        
        let response = Details.CenterMap.Response(region: region)
        presenter?.presentCenterMap(response: response)
    }
}
