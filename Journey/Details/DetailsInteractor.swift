//
//  DetailsInteractor.swift
//  Journey
//
//  Created by  Mikhail on 29.03.2021.
//  Copyright (c) 2021  Mikhail. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol DetailsBusinessLogic {
    func prepareImage(request: Details.SetImage.Request)
    func prepareStats(request: Details.SetStatistic.Request)
    func preparePhotos(request: Details.ShowPhotos.Request)
    func prepareMap(request: Details.SetMap.Request)
}

protocol DetailsDataStore {
    var route: Route? { get set }
}

class DetailsInteractor: DetailsBusinessLogic, DetailsDataStore {
    var route: Route?
    
    
    var presenter: DetailsPresentationLogic?
    var worker: DetailsWorker?
    
    func prepareStats(request: Details.SetStatistic.Request) {
        guard let route = route else { return }
        let response = Details.SetStatistic.Response(route: route)
        presenter?.presentStats(response: response)
    }
    func prepareImage(request: Details.SetImage.Request) {
        guard let data = route?.imageData, let image = UIImage(data: data) else { return }
        let response = Details.SetImage.Response(image: image)
        presenter?.presentImage(response: response)
    }
    
    func preparePhotos(request: Details.ShowPhotos.Request) {
        
        guard let route = route else { return }
        guard let from = route.timeStamps.first, let to = route.timeStamps.last else { return }
        worker = DetailsWorker()
        let photos = worker?.getPhotos(fromDate: from, toDate: to)
        let response = Details.ShowPhotos.Response(route: route, photos: photos)
        presenter?.presentData(response: response)
    }
    func prepareMap(request: Details.SetMap.Request) {
        guard let route = route else { return }
        var coordinates = [CLLocationCoordinate2D]()
        for loc in route.coordinates {
            coordinates.append(CLLocationCoordinate2D(latitude: loc.lat, longitude: loc.lon))
        }
        let response = Details.SetMap.Response(coordinates: coordinates)
        presenter?.presentMap(response: response)
    }
}
